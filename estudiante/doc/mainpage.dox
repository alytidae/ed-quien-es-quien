/*! \mainpage El Juego de Quien es Quien

@image html Quien-es-quien.png "Quien es Quien"

# Información sobre Doxygen
Doxygen admite el uso de la [sintaxis de Markdown (Consulta aquí los comandos básicos)](https://www.markdownguide.org/basic-syntax).

Así como el uso de  <a href="https://htmlcheatsheet.com/">sintaxis <strong>HTML</strong></a>. Esto es especialmente útil
para aquellos aspectos que Markdown no permite modificar, como el <span  style="color:red">color</span>. Aunque es buena idea evitarlo en la medida de lo posible, por dos
motivos:

1. <span style="font-size:1.1em">Hace el código <strong>poco</strong> <span style="  background-image: linear-gradient(to left, #4285f4, #34a853, #fbbc05, #ea4335); -webkit-background-clip: text; color: transparent;"> <strong> LEGIBLE </strong> </span></span>
2. La idea detrás de Markdown es separar _aspecto_ y _contenido_. Y es una __gran idea__.

La forma más correcta de modificar el aspecto debería ser mediante un documento ``.css`` configurado en el archivo ``Doxyfile.in``.
Si te interesa, puedes echarle un vistazo a la [documentación](https://www.doxygen.nl/manual/customize.html) o a
temas customizados como [este](https://jothepro.github.io/doxygen-awesome-css/). Aunque el tema por defecto nos parece
perfecto, _CLÁSICO_. Así puedes centrarte en el contenido.

Por último, lo hemos visto en clase y hay suficientes ejemplos en el código fuente proporcionado, pero puedes consultar la
mayor parte de la sintaxis de Doxygen para comentar código en su
[documentación](https://www.doxygen.nl/manual/docblocks.html).

# Introducción

Mohamed Habbat
Igor Botukhov

Tarea 2: inicio del juego 
- void iniciar_juego()
- Con una ejecución normal del juego, se puede comprobar que la función funciona correctamente al mover el nodo de la jugada actual en la dirección asignada por el usuario.
- Si se responde "Si" a una pregunta, se mueve el nodo de la jugada actual a la izquierda. Respondiendo "NO" se mueve a la derecha.

Tarea 3: informacion de la jugada actual
- set<string> informacion_jugada(bintree<Pregunta>::node jugada_actual)
- Esta función se utiliza para saber que personajes deberían seguir teniendo su icono mostrado por pantalla como personajes restantes.
-
Tarea 4: profundidad promedio de las hojas
- float QuienEsQuien::profundidad_promedio_hojas()
  list<int> recursion_auxiliar( bintree<Pregunta>::node n)
- De manera no grafica, en la terminal se puede visualizar los resultados de esta funcion debajo de cada arbol.
- Como con cada hoja del arbol aparece consigo la profundidad del nodo, se puede calcular a mano la profundidad promedio y comprobar que cumple con el resultado devuelto por la función.

Tarea 8: aniadir personaje al arbol
- void aniade_personaje(string nombre, vector<bool> caracteristicas, bintree<Pregunta>::node n, string nombre_imagen_personaje="");
  void aniade_personaje_auxiliar(string nombre, vector<bool> caracteristicas, bintree<Pregunta>::node n, string nombre_imagen_personaje="");
- En una ejecución de terminal, 

Tarea 9: eliminacion de un personaje del arbol
- void elimina_personaje(string nombre)
- 

# Ejecutables



*/
