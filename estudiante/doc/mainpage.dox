/*! \mainpage El Juego de Quien es Quien

@image html Quien-es-quien.png "Quien es Quien"

# Información sobre Doxygen
Doxygen admite el uso de la [sintaxis de Markdown (Consulta aquí los comandos básicos)](https://www.markdownguide.org/basic-syntax).

Así como el uso de  <a href="https://htmlcheatsheet.com/">sintaxis <strong>HTML</strong></a>. Esto es especialmente útil
para aquellos aspectos que Markdown no permite modificar, como el <span  style="color:red">color</span>. Aunque es buena idea evitarlo en la medida de lo posible, por dos
motivos:

1. <span style="font-size:1.1em">Hace el código <strong>poco</strong> <span style="  background-image: linear-gradient(to left, #4285f4, #34a853, #fbbc05, #ea4335); -webkit-background-clip: text; color: transparent;"> <strong> LEGIBLE </strong> </span></span>
2. La idea detrás de Markdown es separar _aspecto_ y _contenido_. Y es una __gran idea__.

La forma más correcta de modificar el aspecto debería ser mediante un documento ``.css`` configurado en el archivo ``Doxyfile.in``.
Si te interesa, puedes echarle un vistazo a la [documentación](https://www.doxygen.nl/manual/customize.html) o a
temas customizados como [este](https://jothepro.github.io/doxygen-awesome-css/). Aunque el tema por defecto nos parece
perfecto, _CLÁSICO_. Así puedes centrarte en el contenido.

Por último, lo hemos visto en clase y hay suficientes ejemplos en el código fuente proporcionado, pero puedes consultar la
mayor parte de la sintaxis de Doxygen para comentar código en su
[documentación](https://www.doxygen.nl/manual/docblocks.html).

# Introducción

Mohamed Habbat
Igor Botukhov

Tarea 1: crear_árbol()
- bintree<Pregunta> QuienEsQuien::crear_arbol(vector<string> atributos, int indice_atributo, vector<string> personajes, vector<bool> personajes_restantes, vector<vector<bool>> tablero);
- En un archivo determinado, construye un árbol de todas las opciones de preguntas y respuestas
- El algoritmo consiste en la ejecución recursiva de esta función hasta que revisemos todas las preguntas

Tarea 2: inicio del juego 
- void iniciar_juego()
- Con una ejecución normal del juego, se puede comprobar que la función funciona correctamente al mover el nodo de la jugada actual en la dirección asignada por el usuario.
- Si se responde "Si" a una pregunta, se mueve el nodo de la jugada actual a la izquierda. Respondiendo "NO" se mueve a la derecha.

Tarea 3: informacion de la jugada actual
- set<string> informacion_jugada(bintree<Pregunta>::node jugada_actual)
- Esta función se utiliza para saber que personajes deberían seguir teniendo su icono mostrado por pantalla como personajes restantes.
-
Tarea 4: profundidad promedio de las hojas
- float QuienEsQuien::profundidad_promedio_hojas()
  list<int> recursion_auxiliar( bintree<Pregunta>::node n)
- De manera no grafica, en la terminal se puede visualizar los resultados de esta funcion debajo de cada arbol.
- Como con cada hoja del arbol aparece consigo la profundidad del nodo, se puede calcular a mano la profundidad promedio y comprobar que cumple con el resultado devuelto por la función.

Tarea 5: eliminar_nodos_redundantes()
- void QuienEsQuien::eliminar_nodos_redundantes(bintree<Pregunta>::node nodo, bintree<Pregunta>& arbol)
- Elimina las preguntas que no se harán reduciendo el tamaño del árbol
- El algoritmo recorre recursivamente todo el árbol y ver si cada raíz tiene nodos a la izquierda y a la derecha y si no lo hace, hace que uno de esos nodos sea la raíz.

Tarea 6: Inteligencia de la máquina
- bintree<Pregunta> QuienEsQuien::crear_arbol_inteligente(vector<string> atributos, int indice_atributo, vector<string> personajes, vector<bool> personajes_restantes, vector<vector<bool>> tablero);
- El algoritmo hace pasos muy similares a los de la función crear_arbol (), pero agrega una función que calcula la entropía y, en su dependencia, agrega preguntas más altas o más bajas.
- Para ejecutar este algoritmo al iniciar el programa, debe responder con la letra "I" a la pregunta si queremos usar esta función

Tarea 7: Preguntas Formuladas
- string preguntas_formuladas(bintree<Pregunta>::node jugada);
- Una pequeña función que nos muestra qué preguntas ya hemos respondido en función del nodo actual en el que estamos

Tarea 8: aniadir personaje al arbol
- void aniade_personaje(string nombre, vector<bool> caracteristicas, bintree<Pregunta>::node n, string nombre_imagen_personaje="");
  void aniade_personaje_auxiliar(string nombre, vector<bool> caracteristicas, bintree<Pregunta>::node n, string nombre_imagen_personaje="");
- ./bin/quienesquien ./datos/personajes-1.csv
- Debe añadirse Gabriel junto a Juan, como aparece en el ejemplo de la diapositiva. Selecciona No, No, No para encontrar al final a Gabriel.

Tarea 9: eliminacion de un personaje del arbol
- void elimina_personaje(string nombre)
- ./bin/quienesquien ./datos/personajes-1.csv
- Ana debería ser eliminada.

Inciso: Como el programa utiliza varias hebras, no me permite preguntarle al usuario que jugador eliminar o cual añadir, por lo que lo trato de hacer con ejemplos arbitrarios. En sospecha de haber escrito el codigo de las 2 funciones anteriores para los resultados esperados, puede revisar el codigo y verá que sigue los pasos bien definidos en las diapositivas y funciona para cualquier input.

Tarea 10: adición del modo gráfico
- void iniciar_juego() modificado.
- ./bin/quienesquien ./datos/personajes_graficos.csv ./datos/Tapada.png
- Se debería iniciar una ventana pequeña con las caras de los personajes donde se puede jugar.

# Ejecutables



*/
